import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'kotlin'

// jitpack
apply plugin: 'maven'
group = 'com.github.kotlin-graphics'

buildscript {

    ext.kotlinVersion = '1.2.30-eap-16'

    repositories {
        mavenCentral()
        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
        maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    compile 'com.github.kotlin-graphics:uno-sdk:9b180ad3940abdc2e706b115d48a270202c11a3a'
    compile 'com.github.kotlin-graphics:openvr:f5ec4ac7fbfaf310458d4abd82fb221ec822ee62'

    testCompile 'com.github.elect86:kotlintest:43281b7e1b'

    compile "net.java.dev.jna:jna:4.4.0"


    def jogl = "2.3.2"

    compile("org.jogamp.gluegen:gluegen-rt:$jogl")
    compile("org.jogamp.jogl:jogl-all:$jogl")

    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-android-aarch64")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-android-armv6")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-linux-amd64")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-linux-armv6")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-linux-armv6hf")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-linux-i586")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-macosx-universal")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-solaris-amd64")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-solaris-i586")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-windows-amd64")
    runtime("org.jogamp.gluegen:gluegen-rt:$jogl:natives-windows-i586")

    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-android-aarch64")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-android-armv6")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-linux-amd64")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-linux-armv6")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-linux-armv6hf")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-linux-i586")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-macosx-universal")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-solaris-amd64")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-solaris-i586")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-windows-amd64")
    runtime("org.jogamp.jogl:jogl-all:$jogl:natives-windows-i586")

    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows"
            break
        case OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos"
            break
    }
    ext.lwjglVersion = "3.1.6-SNAPSHOT"
    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
}

repositories {
    mavenCentral()
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

//jar {
//    /** This line of code recursively collects and copies all of a project's files and adds them to the JAR itself.
//     One can extend this task, to skip certain files or particular types at will */
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//}

artifacts { archives packageSources }